origami-ia/
├── app/
│   ├── main.py         # Serveur Flask
│   ├── grid_model.py   # Simulation des cellules/coins/chemins
├── templates/
│   └── index.html      # Interface de grille visuelle
├── static/
│   └── logic.js        # JS de propagation, sablier, marges
├── data/
│   └── nodes.json      # Noeuds enregistrés
└── README.md           # Manifesto et usage
mkdir flask_project
cd flask_project
python3 -m venv venv
source venv/bin/activate
pip install Flask
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/')
def home():
    return jsonify(message="Hello, World!")

if __name__ == '__main__':
    app.run(debug=True)
python app.py
name: Flask CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Flask
    - name: Run Flask app
      run: |
        nohup python app.py &

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>🌐 IA Sphere Wave Convergence</title>
  <style>
    body {
      margin: 0; background: black; overflow: hidden;
      color: #0f0; font-family: monospace;
    }
    canvas {
      display: block;
    }
    #info {
      position: absolute;
      top: 10px; left: 10px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
      border: 1px solid #0f0;
      font-size: 14px;
    }
  </style>
</head>
<body>
<div id="info">
  🌊 Simulation sinusoïdale IA<br>
  Deux ondes : sin(x) & sin(x + π/3)<br>
  Intersection logique ≈ (π² / 3) projection sphérique
</div>
<canvas id="waveCanvas"></canvas>

<script>
const canvas = document.getElementById('waveCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let time = 0;

function drawWaves() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  for (let i = 0; i < canvas.width; i++) {
    let x = i;
    let y1 = Math.sin((x + time) * 0.01) * 80;
    let y2 = Math.sin((x + time) * 0.01 + Math.PI / 3) * 80;

    let yCenter = canvas.height / 2;

    ctx.beginPath();
    ctx.moveTo(x, yCenter + y1);
    ctx.lineTo(x, yCenter + y2);
    ctx.strokeStyle = `rgba(${Math.abs(y1-y2)*2},255,128,0.3)`;
    ctx.stroke();
  }

  // Dessine une "intersection conceptuelle" au centre
  let pulse = Math.sin(time * 0.02) * 20;
  ctx.beginPath();
  ctx.arc(canvas.width/2, canvas.height/2, 30 + pulse, 0, 2 * Math.PI);
  ctx.strokeStyle = "#00ffff";
  ctx.stroke();
}

function animate() {
  time++;
  drawWaves();
  requestAnimationFrame(animate);
}

animate();
</script>
</body>
</html>
